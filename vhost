#!/usr/bin/env ruby
# encoding: utf-8

require 'fileutils'
require 'optparse'
require 'erubis'
require 'yaml'

VERSION = "1.0.2"
CONF_NAME = "vhosts.yml"
CONFIG_PATHS = [
  'vhosts-conf',
  '../etc/vhosts-conf',
  '/usr/local/etc/vhosts-conf',
  '/etc/vhosts-conf'
]

Dir.chdir File.expand_path(File.dirname(__FILE__))

config_path = CONFIG_PATHS.select { |path| File.exist? path }.first
abort "Can't find configuration!\nSearch locations:\n#{CONFIG_PATHS.join("\n")}" if config_path.nil?

conf = YAML.load_file File.join(config_path, "vhosts.yml")
conf['server_conf']      ||= '/usr/local/etc/nginx'
conf['sites_folder']     ||= '/var/www'
conf['default_template'] ||= 'nginx.conf.erb'
conf['editor']           ||= 'open'

abort "Can't find default template\nLooking in `#{File.join(config_path, "templates", conf['default_template'])}`" unless File.exist? File.join(config_path, "templates", conf['default_template'])

options = {}
args = OptionParser.new do |opts|
  opts.banner = "Usage: vhost NAME [options]"
  
  opts.on("-c", "--create", "Create vhost") do |e|
    options[:create] = e
  end
    
  opts.on("-m", "--modify", "--edit", "Modify vhost") do |e|
    options[:modify] = e
  end
  
  opts.on("-e", "--enable", "Enable vhost") do |e|
    options[:enable] = e
  end

  opts.on("-d", "--disable", "Disable vhost") do |e|
    options[:disable] = e
  end
  
  opts.on("--delete", "delete vhost") do |e|
    options[:delete] = e
  end
  
  opts.on("-r", "--restart", "Run server restart command") do |e|
    options[:restart] = e
  end
    
  opts.on("-l", "--list") do
    puts "Sites available:"
    system "ls", File.join(conf['server_conf'], 'sites-available')
    puts "\nSites enabled:"
    system "ls", File.join(conf['server_conf'], 'sites-enabled')
  end
  
  opts.on("--list-available", "List sites available") do
    system "ls", File.join(conf['server_conf'], 'sites-available')
  end
  
  opts.on("--list-enabled", "List sites enabled") do
    system "ls", File.join(conf['server_conf'], 'sites-enabled')
  end
  
  opts.separator ""
  opts.separator "Configuration options:"
  
  opts.on("--show KEY", "Shows the configuration value for KEY") do |k|
    puts conf[k]
    exit
  end
  
  opts.on "--conf KEY=VALUE", "Change configuration" do |e|
    e = e.split("=")
    conf[e[0]] = e[1]
    temp_conf = YAML.load_file File.join(config_path, "vhosts.yml")
    temp_conf[e[0]] = e[1]
    File.open File.join(config_path, "vhosts.yml"), "w" do |file|
      file.write temp_conf.to_yaml
    end
    exit
  end
    
  opts.on("--sites-dir PATH", "Specify sites folder") do |path|
    conf['sites_folder'] = path
  end
  
  opts.on("-t TEMPLATE", "--template TEMPLATE", "Use template") do |t|
    conf['default_template'] = t
    options[:template] = true
  end
  
  opts.separator ""
  opts.separator "Common options:"
    
  opts.on("-v", "--version", "Print version") do
    puts "vhost - version #{VERSION}\nhttps://github.com/SleepingInsomniac/vhost"
    exit
  end
  
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
  
end.parse!

vhost = ARGV[0].gsub(/\.conf/, "") if ARGV[0]
vhost_full = "#{vhost}.conf"

if options[:create]
  abort "#{vhost} exists!" if File.exist? File.join(conf['server_conf'], 'sites-available', "#{vhost_full}")
  
  File.open File.join(conf['server_conf'], 'sites-available', "#{vhost_full}"), "w" do |f|
    template = Erubis::Eruby.new File.read(File.join(config_path, 'templates', conf['default_template']))    
    f.write template.result(vhost: vhost, conf: conf)
  end
  puts "#{vhost} created"
end

if options[:delete]
  abort "#{vhost} doesn't exist" unless File.exist? File.join(conf['server_conf'], 'sites-available', "#{vhost_full}")
  print "Really delete #{vhost}?: "
  confirm = STDIN.gets.chomp
  if confirm =~ /y/i
    File.unlink File.join(conf['server_conf'], 'sites-available', "#{vhost_full}")
    File.unlink File.join(conf['server_conf'], 'sites-enabled', "#{vhost_full}") if File.exist? File.join(conf['server_conf'], 'sites-enabled', "#{vhost_full}")
    puts "#{vhost} deleted"
  end
end

if options[:modify]
  if options[:template]
    t = conf['default_template']
    t = t.gsub(/\.erb|\.conf/i, '') + ".conf.erb"
    system conf['editor'], File.join(config_path, 'templates', t)
  else
    system conf['editor'], "#{File.join(conf['server_conf'], 'sites-available', "#{vhost_full}")}"
  end
end

if options[:enable]
  abort "#{vhost} doesn't exist" unless File.exist? File.join(conf['server_conf'], 'sites-available', "#{vhost_full}")
  abort "#{vhost} already enabled" if File.exist? File.join(conf['server_conf'], 'sites-enabled', "#{vhost_full}")
  File.symlink File.join(conf['server_conf'], 'sites-available', "#{vhost_full}"), File.join(conf['server_conf'], 'sites-enabled', "#{vhost_full}")
  puts "#{vhost} Enabled"
end

if options[:disable]
  abort "#{vhost} doesn't exist" unless File.exist? File.join(conf['server_conf'], 'sites-available', "#{vhost_full}")
  abort "#{vhost} not enabled" unless File.exist? File.join(conf['server_conf'], 'sites-enabled', "#{vhost_full}")
  File.unlink File.join(conf['server_conf'], 'sites-enabled', "#{vhost_full}")
  puts "#{vhost} disabled"
end

puts `#{conf['restart_cmd']}` if options[:restart]
