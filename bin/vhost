#!/usr/bin/env ruby
# encoding: utf-8

require 'optparse'
require 'colorize'
require_relative '../lib/vhost.rb'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: vhost NAME [options]"
  
  opts.on "-c", "--create", "Create vhost"                  do |o| options[:create]  = o end
  opts.on "-m", "--modify", "--edit", "Modify vhost"        do |o| options[:modify]  = o end
  opts.on "-e", "--enable", "Enable vhost"                  do |o| options[:enable]  = o end
  opts.on "-d", "--disable", "Disable vhost"                do |o| options[:disable] = o end
  opts.on "--delete", "delete vhost"                        do |o| options[:delete]  = o end
  opts.on "-r", "--restart", "Run server restart command"   do |o| options[:restart] = o end
  opts.on "--create-folder", "create site folder structure" do |o| options[:folder]  = o end
  opts.on "-p", "--path", "Show a site folder's path"       do |o| options[:path]    = o end
  opts.on "-l", "--list", "List sites"                      do |o| options[:list]    = o end
  opts.on "--list-available", "List sites available"        do |o| options[:lista]   = o end
  opts.on "--list-enabled", "List sites enabled"            do |o| options[:liste]   = o end
  opts.on "-i", "--info", "Show vhost info"                 do |o| options[:info]    = o end
  opts.on "-f", "--folder", "Show folder"                   do |o| options[:show]    = o end
  opts.on "-t FILE", "--template FILE", "Use template"      do |o| options[:temp]    = o end

  # ==========================
  # = Configuration Options: =
  # ==========================
  
  opts.separator ""
  opts.separator "Configuration options:"
  
  opts.on "-q", "--quiet", "Surpress output"                do |o| options[:quiet] = o end
  
  opts.on "--edit-conf", "Edit vhosts.yml" do |o|
    system Vhost.conf['editor'], Vhost.conf_file
    exit
  end
  
  opts.on "--conf [KEY | KEY=VALUE]", "Change/show configuration" do |e|
    if e =~ /\=/i
      e = e.split("=")
      Vhost.conf[e[0]] = e[1]
      Vhost.save_conf
    else
      puts Vhost.conf[e]
    end
    exit
  end
  
  # ==================
  # = Common Options =
  # ==================
  
  opts.separator ""
  opts.separator "Common options:"
  
  opts.on "-v", "--version", "Print version" do
    puts "vhost - version #{Vhost::VERSION}", "https://github.com/SleepingInsomniac/vhost"
    exit
  end
  
  opts.on "-h", "--help", "Prints this help" do
    puts opts
    exit
  end
  
end.parse!

abort "Usage:\tvhost NAME [options]\n\tvhost -h for more information" if options.empty? and ARGV[0].nil?

@options = options
def puts(*args)
  super(*args) unless @options[:quiet]
end

if options[:temp]
  
  template = Dir[File.join(Vhost.conf_path, 'templates', "#{options[:temp]}*")].first
  abort "Can't find that template" unless template
  
  if options[:modify]
    system Vhost.conf['editor'], template
    exit
  end
  
  Vhost.conf['default_template'] = File.basename(template)
  
end

if options[:create]
  vhost = Vhost.find(ARGV[0])
  abort "#{vhost.basename} exists!" if Vhost.find(ARGV[0])
  vhost = Vhost.create(ARGV[0])
  puts "#{vhost.basename} created" if vhost
end

vhost = Vhost.find(ARGV[0])
abort "#{ARGV[0]} doesn't exist" unless vhost

if options.empty? and not ARGV[0].nil?
  # abort "#{vhost.basename} exists"
  puts "  Name: #{vhost.name}"
  print "Status: "
  puts vhost.enabled? ? "Enabled".green : "Disabled".red
  puts "  Path: #{vhost.path}"
  puts "Folder: #{vhost.folder}"
end

if options[:delete]
  print "Really delete #{vhost.basename}? [y/n]: "
  confirm = STDIN.gets.chomp
  if confirm =~ /y/i
    vhost.delete!
    puts "#{vhost.basename} deleted"
    exit
  end
end

if options[:modify]
  system Vhost.conf['editor'], vhost.paths[:available]
end

if options[:folder]
  structure = ['/', '/public', '/log']
  structure.each do |folder|
    folder = File.join(Vhost.conf['sites_folder'], vhost.basename, folder)
    FileUtils.mkdir_p folder
    puts "Created #{folder}"
  end
end

if options[:path]
  puts File.join(Vhost.conf['sites_folder'], vhost.basename)
end

if options[:enable]
  abort "#{vhost.basename} already enabled" if vhost.enabled?
  vhost.enable
  puts "#{vhost.basename} Enabled"
end

if options[:disable]
  abort "#{vhost.basename} not enabled" unless vhost.enabled?
  vhost.disable
  puts "#{vhost.basename} disabled"
end

if options[:list]
  Vhost.all.sort { |v1,v2| v1 <=> v2 }.each do |v|
    puts v.enabled? ? " Enabled: #{File.basename(v.path)}".green : "Disabled: #{File.basename(v.path)}".red
  end
end

if options[:lista]
  Vhost.all.each do |v|
    puts v.path
  end
end

if options[:liste]
  # system "ls", File.join(Vhost.conf['server_conf'], 'sites-enabled')
  Vhost.all.each do |v|
    puts v.path if v.enabled?
  end
end

if options[:info]
  puts "Name: #{vhost.basename}"
  puts "Config: #{vhost.paths[:available]}"
  puts "Enabled: #{vhost.enabled?}"
  puts "Folder: #{vhost.paths[:folder]}"
end

if options[:show]
  puts vhost.paths[:folder]
end

puts `#{Vhost.conf['restart_cmd']}` if options[:restart]
